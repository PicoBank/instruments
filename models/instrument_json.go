// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// InstrumentJSON is an object representing the database table.
type InstrumentJSON struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Datum       null.JSON   `boil:"datum" json:"datum,omitempty" toml:"datum" yaml:"datum,omitempty"`
	Audit       null.JSON   `boil:"audit" json:"audit,omitempty" toml:"audit" yaml:"audit,omitempty"`
	CurrencyID  null.Int    `boil:"currency_id" json:"currency_id,omitempty" toml:"currency_id" yaml:"currency_id,omitempty"`
	FromDate    time.Time   `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ThruDate    null.Time   `boil:"thru_date" json:"thru_date,omitempty" toml:"thru_date" yaml:"thru_date,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedBy   string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedBy   string      `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *instrumentJSONR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L instrumentJSONL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstrumentJSONColumns = struct {
	ID          string
	Name        string
	Description string
	Datum       string
	Audit       string
	CurrencyID  string
	FromDate    string
	ThruDate    string
	CreatedAt   string
	UpdatedAt   string
	CreatedBy   string
	UpdatedBy   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	Datum:       "datum",
	Audit:       "audit",
	CurrencyID:  "currency_id",
	FromDate:    "from_date",
	ThruDate:    "thru_date",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	CreatedBy:   "created_by",
	UpdatedBy:   "updated_by",
}

// instrumentJSONR is where relationships are stored.
type instrumentJSONR struct {
	Currency *Instrument
}

// instrumentJSONL is where Load methods for each relationship are stored.
type instrumentJSONL struct{}

var (
	instrumentJSONColumns               = []string{"id", "name", "description", "datum", "audit", "currency_id", "from_date", "thru_date", "created_at", "updated_at", "created_by", "updated_by"}
	instrumentJSONColumnsWithoutDefault = []string{"name", "description", "datum", "audit", "currency_id", "from_date", "thru_date", "created_by", "updated_by"}
	instrumentJSONColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	instrumentJSONPrimaryKeyColumns     = []string{"id"}
)

type (
	// InstrumentJSONSlice is an alias for a slice of pointers to InstrumentJSON.
	// This should generally be used opposed to []InstrumentJSON.
	InstrumentJSONSlice []*InstrumentJSON
	// InstrumentJSONHook is the signature for custom InstrumentJSON hook methods
	InstrumentJSONHook func(boil.Executor, *InstrumentJSON) error

	instrumentJSONQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	instrumentJSONType                 = reflect.TypeOf(&InstrumentJSON{})
	instrumentJSONMapping              = queries.MakeStructMapping(instrumentJSONType)
	instrumentJSONPrimaryKeyMapping, _ = queries.BindMapping(instrumentJSONType, instrumentJSONMapping, instrumentJSONPrimaryKeyColumns)
	instrumentJSONInsertCacheMut       sync.RWMutex
	instrumentJSONInsertCache          = make(map[string]insertCache)
	instrumentJSONUpdateCacheMut       sync.RWMutex
	instrumentJSONUpdateCache          = make(map[string]updateCache)
	instrumentJSONUpsertCacheMut       sync.RWMutex
	instrumentJSONUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var instrumentJSONBeforeInsertHooks []InstrumentJSONHook
var instrumentJSONBeforeUpdateHooks []InstrumentJSONHook
var instrumentJSONBeforeDeleteHooks []InstrumentJSONHook
var instrumentJSONBeforeUpsertHooks []InstrumentJSONHook

var instrumentJSONAfterInsertHooks []InstrumentJSONHook
var instrumentJSONAfterSelectHooks []InstrumentJSONHook
var instrumentJSONAfterUpdateHooks []InstrumentJSONHook
var instrumentJSONAfterDeleteHooks []InstrumentJSONHook
var instrumentJSONAfterUpsertHooks []InstrumentJSONHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstrumentJSON) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstrumentJSON) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstrumentJSON) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstrumentJSON) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstrumentJSON) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstrumentJSON) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstrumentJSON) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstrumentJSON) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstrumentJSON) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range instrumentJSONAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstrumentJSONHook registers your hook function for all future operations.
func AddInstrumentJSONHook(hookPoint boil.HookPoint, instrumentJSONHook InstrumentJSONHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		instrumentJSONBeforeInsertHooks = append(instrumentJSONBeforeInsertHooks, instrumentJSONHook)
	case boil.BeforeUpdateHook:
		instrumentJSONBeforeUpdateHooks = append(instrumentJSONBeforeUpdateHooks, instrumentJSONHook)
	case boil.BeforeDeleteHook:
		instrumentJSONBeforeDeleteHooks = append(instrumentJSONBeforeDeleteHooks, instrumentJSONHook)
	case boil.BeforeUpsertHook:
		instrumentJSONBeforeUpsertHooks = append(instrumentJSONBeforeUpsertHooks, instrumentJSONHook)
	case boil.AfterInsertHook:
		instrumentJSONAfterInsertHooks = append(instrumentJSONAfterInsertHooks, instrumentJSONHook)
	case boil.AfterSelectHook:
		instrumentJSONAfterSelectHooks = append(instrumentJSONAfterSelectHooks, instrumentJSONHook)
	case boil.AfterUpdateHook:
		instrumentJSONAfterUpdateHooks = append(instrumentJSONAfterUpdateHooks, instrumentJSONHook)
	case boil.AfterDeleteHook:
		instrumentJSONAfterDeleteHooks = append(instrumentJSONAfterDeleteHooks, instrumentJSONHook)
	case boil.AfterUpsertHook:
		instrumentJSONAfterUpsertHooks = append(instrumentJSONAfterUpsertHooks, instrumentJSONHook)
	}
}

// OneP returns a single instrumentJSON record from the query, and panics on error.
func (q instrumentJSONQuery) OneP() *InstrumentJSON {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single instrumentJSON record from the query.
func (q instrumentJSONQuery) One() (*InstrumentJSON, error) {
	o := &InstrumentJSON{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for instrument_json")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all InstrumentJSON records from the query, and panics on error.
func (q instrumentJSONQuery) AllP() InstrumentJSONSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all InstrumentJSON records from the query.
func (q instrumentJSONQuery) All() (InstrumentJSONSlice, error) {
	var o []*InstrumentJSON

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstrumentJSON slice")
	}

	if len(instrumentJSONAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all InstrumentJSON records in the query, and panics on error.
func (q instrumentJSONQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all InstrumentJSON records in the query.
func (q instrumentJSONQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count instrument_json rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q instrumentJSONQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q instrumentJSONQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if instrument_json exists")
	}

	return count > 0, nil
}

// CurrencyG pointed to by the foreign key.
func (o *InstrumentJSON) CurrencyG(mods ...qm.QueryMod) instrumentQuery {
	return o.Currency(boil.GetDB(), mods...)
}

// Currency pointed to by the foreign key.
func (o *InstrumentJSON) Currency(exec boil.Executor, mods ...qm.QueryMod) instrumentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Instruments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"instruments\".\"instrument\"")

	return query
} // LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (instrumentJSONL) LoadCurrency(e boil.Executor, singular bool, maybeInstrumentJSON interface{}) error {
	var slice []*InstrumentJSON
	var object *InstrumentJSON

	count := 1
	if singular {
		object = maybeInstrumentJSON.(*InstrumentJSON)
	} else {
		slice = *maybeInstrumentJSON.(*[]*InstrumentJSON)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &instrumentJSONR{}
		}
		args[0] = object.CurrencyID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &instrumentJSONR{}
			}
			args[i] = obj.CurrencyID
		}
	}

	query := fmt.Sprintf(
		"select * from \"instruments\".\"instrument\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Instrument")
	}
	defer results.Close()

	var resultSlice []*Instrument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Instrument")
	}

	if len(instrumentJSONAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Currency = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID.Int == foreign.ID {
				local.R.Currency = foreign
				break
			}
		}
	}

	return nil
}

// SetCurrencyG of the instrument_json to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstrumentJsons.
// Uses the global database handle.
func (o *InstrumentJSON) SetCurrencyG(insert bool, related *Instrument) error {
	return o.SetCurrency(boil.GetDB(), insert, related)
}

// SetCurrencyP of the instrument_json to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstrumentJsons.
// Panics on error.
func (o *InstrumentJSON) SetCurrencyP(exec boil.Executor, insert bool, related *Instrument) {
	if err := o.SetCurrency(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrencyGP of the instrument_json to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstrumentJsons.
// Uses the global database handle and panics on error.
func (o *InstrumentJSON) SetCurrencyGP(insert bool, related *Instrument) {
	if err := o.SetCurrency(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCurrency of the instrument_json to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.CurrencyInstrumentJsons.
func (o *InstrumentJSON) SetCurrency(exec boil.Executor, insert bool, related *Instrument) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"instruments\".\"instrument_json\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, instrumentJSONPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID.Int = related.ID
	o.CurrencyID.Valid = true

	if o.R == nil {
		o.R = &instrumentJSONR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &instrumentR{
			CurrencyInstrumentJsons: InstrumentJSONSlice{o},
		}
	} else {
		related.R.CurrencyInstrumentJsons = append(related.R.CurrencyInstrumentJsons, o)
	}

	return nil
}

// RemoveCurrencyG relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *InstrumentJSON) RemoveCurrencyG(related *Instrument) error {
	return o.RemoveCurrency(boil.GetDB(), related)
}

// RemoveCurrencyP relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *InstrumentJSON) RemoveCurrencyP(exec boil.Executor, related *Instrument) {
	if err := o.RemoveCurrency(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCurrencyGP relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *InstrumentJSON) RemoveCurrencyGP(related *Instrument) {
	if err := o.RemoveCurrency(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCurrency relationship.
// Sets o.R.Currency to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *InstrumentJSON) RemoveCurrency(exec boil.Executor, related *Instrument) error {
	var err error

	o.CurrencyID.Valid = false
	if err = o.Update(exec, "currency_id"); err != nil {
		o.CurrencyID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Currency = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CurrencyInstrumentJsons {
		if o.CurrencyID.Int != ri.CurrencyID.Int {
			continue
		}

		ln := len(related.R.CurrencyInstrumentJsons)
		if ln > 1 && i < ln-1 {
			related.R.CurrencyInstrumentJsons[i] = related.R.CurrencyInstrumentJsons[ln-1]
		}
		related.R.CurrencyInstrumentJsons = related.R.CurrencyInstrumentJsons[:ln-1]
		break
	}
	return nil
}

// InstrumentJsonsG retrieves all records.
func InstrumentJsonsG(mods ...qm.QueryMod) instrumentJSONQuery {
	return InstrumentJsons(boil.GetDB(), mods...)
}

// InstrumentJsons retrieves all the records using an executor.
func InstrumentJsons(exec boil.Executor, mods ...qm.QueryMod) instrumentJSONQuery {
	mods = append(mods, qm.From("\"instruments\".\"instrument_json\""))
	return instrumentJSONQuery{NewQuery(exec, mods...)}
}

// FindInstrumentJSONG retrieves a single record by ID.
func FindInstrumentJSONG(id int, selectCols ...string) (*InstrumentJSON, error) {
	return FindInstrumentJSON(boil.GetDB(), id, selectCols...)
}

// FindInstrumentJSONGP retrieves a single record by ID, and panics on error.
func FindInstrumentJSONGP(id int, selectCols ...string) *InstrumentJSON {
	retobj, err := FindInstrumentJSON(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindInstrumentJSON retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstrumentJSON(exec boil.Executor, id int, selectCols ...string) (*InstrumentJSON, error) {
	instrumentJSONObj := &InstrumentJSON{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instruments\".\"instrument_json\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(instrumentJSONObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from instrument_json")
	}

	return instrumentJSONObj, nil
}

// FindInstrumentJSONP retrieves a single record by ID with an executor, and panics on error.
func FindInstrumentJSONP(exec boil.Executor, id int, selectCols ...string) *InstrumentJSON {
	retobj, err := FindInstrumentJSON(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *InstrumentJSON) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *InstrumentJSON) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *InstrumentJSON) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *InstrumentJSON) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no instrument_json provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instrumentJSONColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	instrumentJSONInsertCacheMut.RLock()
	cache, cached := instrumentJSONInsertCache[key]
	instrumentJSONInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			instrumentJSONColumns,
			instrumentJSONColumnsWithDefault,
			instrumentJSONColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(instrumentJSONType, instrumentJSONMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(instrumentJSONType, instrumentJSONMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instruments\".\"instrument_json\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instruments\".\"instrument_json\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into instrument_json")
	}

	if !cached {
		instrumentJSONInsertCacheMut.Lock()
		instrumentJSONInsertCache[key] = cache
		instrumentJSONInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single InstrumentJSON record. See Update for
// whitelist behavior description.
func (o *InstrumentJSON) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single InstrumentJSON record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *InstrumentJSON) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the InstrumentJSON, and panics on error.
// See Update for whitelist behavior description.
func (o *InstrumentJSON) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the InstrumentJSON.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *InstrumentJSON) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	instrumentJSONUpdateCacheMut.RLock()
	cache, cached := instrumentJSONUpdateCache[key]
	instrumentJSONUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			instrumentJSONColumns,
			instrumentJSONPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update instrument_json, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instruments\".\"instrument_json\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, instrumentJSONPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(instrumentJSONType, instrumentJSONMapping, append(wl, instrumentJSONPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update instrument_json row")
	}

	if !cached {
		instrumentJSONUpdateCacheMut.Lock()
		instrumentJSONUpdateCache[key] = cache
		instrumentJSONUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q instrumentJSONQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q instrumentJSONQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for instrument_json")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InstrumentJSONSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o InstrumentJSONSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o InstrumentJSONSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstrumentJSONSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentJSONPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instruments\".\"instrument_json\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, instrumentJSONPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in instrumentJSON slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *InstrumentJSON) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *InstrumentJSON) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *InstrumentJSON) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *InstrumentJSON) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no instrument_json provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instrumentJSONColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	instrumentJSONUpsertCacheMut.RLock()
	cache, cached := instrumentJSONUpsertCache[key]
	instrumentJSONUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			instrumentJSONColumns,
			instrumentJSONColumnsWithDefault,
			instrumentJSONColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			instrumentJSONColumns,
			instrumentJSONPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert instrument_json, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(instrumentJSONPrimaryKeyColumns))
			copy(conflict, instrumentJSONPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"instruments\".\"instrument_json\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(instrumentJSONType, instrumentJSONMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(instrumentJSONType, instrumentJSONMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert instrument_json")
	}

	if !cached {
		instrumentJSONUpsertCacheMut.Lock()
		instrumentJSONUpsertCache[key] = cache
		instrumentJSONUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single InstrumentJSON record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *InstrumentJSON) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single InstrumentJSON record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *InstrumentJSON) DeleteG() error {
	if o == nil {
		return errors.New("models: no InstrumentJSON provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single InstrumentJSON record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *InstrumentJSON) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single InstrumentJSON record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstrumentJSON) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no InstrumentJSON provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), instrumentJSONPrimaryKeyMapping)
	sql := "DELETE FROM \"instruments\".\"instrument_json\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from instrument_json")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q instrumentJSONQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q instrumentJSONQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no instrumentJSONQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from instrument_json")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o InstrumentJSONSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o InstrumentJSONSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no InstrumentJSON slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o InstrumentJSONSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstrumentJSONSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no InstrumentJSON slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(instrumentJSONBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentJSONPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instruments\".\"instrument_json\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instrumentJSONPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from instrumentJSON slice")
	}

	if len(instrumentJSONAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *InstrumentJSON) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *InstrumentJSON) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *InstrumentJSON) ReloadG() error {
	if o == nil {
		return errors.New("models: no InstrumentJSON provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstrumentJSON) Reload(exec boil.Executor) error {
	ret, err := FindInstrumentJSON(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstrumentJSONSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InstrumentJSONSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstrumentJSONSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty InstrumentJSONSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstrumentJSONSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	instrumentJsons := InstrumentJSONSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instrumentJSONPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instruments\".\"instrument_json\".* FROM \"instruments\".\"instrument_json\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instrumentJSONPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&instrumentJsons)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstrumentJSONSlice")
	}

	*o = instrumentJsons

	return nil
}

// InstrumentJSONExists checks if the InstrumentJSON row exists.
func InstrumentJSONExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instruments\".\"instrument_json\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if instrument_json exists")
	}

	return exists, nil
}

// InstrumentJSONExistsG checks if the InstrumentJSON row exists.
func InstrumentJSONExistsG(id int) (bool, error) {
	return InstrumentJSONExists(boil.GetDB(), id)
}

// InstrumentJSONExistsGP checks if the InstrumentJSON row exists. Panics on error.
func InstrumentJSONExistsGP(id int) bool {
	e, err := InstrumentJSONExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// InstrumentJSONExistsP checks if the InstrumentJSON row exists. Panics on error.
func InstrumentJSONExistsP(exec boil.Executor, id int) bool {
	e, err := InstrumentJSONExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
