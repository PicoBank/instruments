// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testInstrumentJsons(t *testing.T) {
	t.Parallel()

	query := InstrumentJsons(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInstrumentJsonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrumentJSON.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentJsonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstrumentJsons(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentJsonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentJSONSlice{instrumentJSON}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInstrumentJsonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InstrumentJSONExists(tx, instrumentJSON.ID)
	if err != nil {
		t.Errorf("Unable to check if InstrumentJSON exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstrumentJSONExistsG to return true, but got false.")
	}
}
func testInstrumentJsonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	instrumentJSONFound, err := FindInstrumentJSON(tx, instrumentJSON.ID)
	if err != nil {
		t.Error(err)
	}

	if instrumentJSONFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInstrumentJsonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstrumentJsons(tx).Bind(instrumentJSON); err != nil {
		t.Error(err)
	}
}

func testInstrumentJsonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := InstrumentJsons(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstrumentJsonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSONOne := &InstrumentJSON{}
	instrumentJSONTwo := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSONOne, instrumentJSONDBTypes, false, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentJSONTwo, instrumentJSONDBTypes, false, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSONOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentJSONTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstrumentJsons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstrumentJsonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	instrumentJSONOne := &InstrumentJSON{}
	instrumentJSONTwo := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSONOne, instrumentJSONDBTypes, false, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentJSONTwo, instrumentJSONDBTypes, false, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSONOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentJSONTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func instrumentJSONBeforeInsertHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONAfterInsertHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONAfterSelectHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONBeforeUpdateHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONAfterUpdateHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONBeforeDeleteHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONAfterDeleteHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONBeforeUpsertHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func instrumentJSONAfterUpsertHook(e boil.Executor, o *InstrumentJSON) error {
	*o = InstrumentJSON{}
	return nil
}

func testInstrumentJsonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &InstrumentJSON{}
	o := &InstrumentJSON{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, instrumentJSONDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON object: %s", err)
	}

	AddInstrumentJSONHook(boil.BeforeInsertHook, instrumentJSONBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	instrumentJSONBeforeInsertHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.AfterInsertHook, instrumentJSONAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	instrumentJSONAfterInsertHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.AfterSelectHook, instrumentJSONAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	instrumentJSONAfterSelectHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.BeforeUpdateHook, instrumentJSONBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentJSONBeforeUpdateHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.AfterUpdateHook, instrumentJSONAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentJSONAfterUpdateHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.BeforeDeleteHook, instrumentJSONBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentJSONBeforeDeleteHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.AfterDeleteHook, instrumentJSONAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentJSONAfterDeleteHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.BeforeUpsertHook, instrumentJSONBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentJSONBeforeUpsertHooks = []InstrumentJSONHook{}

	AddInstrumentJSONHook(boil.AfterUpsertHook, instrumentJSONAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentJSONAfterUpsertHooks = []InstrumentJSONHook{}
}
func testInstrumentJsonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentJsonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx, instrumentJSONColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentJSONToOneInstrumentUsingCurrency(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local InstrumentJSON
	var foreign Instrument

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, instrumentDBTypes, false, instrumentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Instrument struct: %s", err)
	}

	local.CurrencyID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CurrencyID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Currency(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := InstrumentJSONSlice{&local}
	if err = local.L.LoadCurrency(tx, false, (*[]*InstrumentJSON)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Currency = nil
	if err = local.L.LoadCurrency(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Currency == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInstrumentJSONToOneSetOpInstrumentUsingCurrency(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstrumentJSON
	var b, c Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentJSONDBTypes, false, strmangle.SetComplement(instrumentJSONPrimaryKeyColumns, instrumentJSONColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Instrument{&b, &c} {
		err = a.SetCurrency(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Currency != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CurrencyInstrumentJsons[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CurrencyID.Int != x.ID {
			t.Error("foreign key was wrong value", a.CurrencyID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrencyID.Int))
		reflect.Indirect(reflect.ValueOf(&a.CurrencyID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CurrencyID.Int != x.ID {
			t.Error("foreign key was wrong value", a.CurrencyID.Int, x.ID)
		}
	}
}

func testInstrumentJSONToOneRemoveOpInstrumentUsingCurrency(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstrumentJSON
	var b Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentJSONDBTypes, false, strmangle.SetComplement(instrumentJSONPrimaryKeyColumns, instrumentJSONColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCurrency(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCurrency(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Currency(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Currency != nil {
		t.Error("R struct entry should be nil")
	}

	if a.CurrencyID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CurrencyInstrumentJsons) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInstrumentJsonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrumentJSON.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentJsonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentJSONSlice{instrumentJSON}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInstrumentJsonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstrumentJsons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	instrumentJSONDBTypes = map[string]string{`Audit`: `jsonb`, `CreatedAt`: `timestamp without time zone`, `CreatedBy`: `character varying`, `CurrencyID`: `integer`, `Datum`: `jsonb`, `Description`: `character varying`, `FromDate`: `timestamp without time zone`, `ID`: `integer`, `Name`: `character varying`, `ThruDate`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `UpdatedBy`: `character varying`}
	_                     = bytes.MinRead
)

func testInstrumentJsonsUpdate(t *testing.T) {
	t.Parallel()

	if len(instrumentJSONColumns) == len(instrumentJSONPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	if err = instrumentJSON.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentJsonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(instrumentJSONColumns) == len(instrumentJSONPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrumentJSON := &InstrumentJSON{}
	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrumentJSON, instrumentJSONDBTypes, true, instrumentJSONPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(instrumentJSONColumns, instrumentJSONPrimaryKeyColumns) {
		fields = instrumentJSONColumns
	} else {
		fields = strmangle.SetComplement(
			instrumentJSONColumns,
			instrumentJSONPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(instrumentJSON))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InstrumentJSONSlice{instrumentJSON}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInstrumentJsonsUpsert(t *testing.T) {
	t.Parallel()

	if len(instrumentJSONColumns) == len(instrumentJSONPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	instrumentJSON := InstrumentJSON{}
	if err = randomize.Struct(seed, &instrumentJSON, instrumentJSONDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentJSON.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstrumentJSON: %s", err)
	}

	count, err := InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &instrumentJSON, instrumentJSONDBTypes, false, instrumentJSONPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstrumentJSON struct: %s", err)
	}

	if err = instrumentJSON.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstrumentJSON: %s", err)
	}

	count, err = InstrumentJsons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
