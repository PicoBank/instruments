// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testInstrumentSources(t *testing.T) {
	t.Parallel()

	query := InstrumentSources(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInstrumentSourcesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrumentSource.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentSourcesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstrumentSources(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstrumentSourcesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentSourceSlice{instrumentSource}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInstrumentSourcesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InstrumentSourceExists(tx, instrumentSource.ID)
	if err != nil {
		t.Errorf("Unable to check if InstrumentSource exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstrumentSourceExistsG to return true, but got false.")
	}
}
func testInstrumentSourcesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	instrumentSourceFound, err := FindInstrumentSource(tx, instrumentSource.ID)
	if err != nil {
		t.Error(err)
	}

	if instrumentSourceFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInstrumentSourcesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = InstrumentSources(tx).Bind(instrumentSource); err != nil {
		t.Error(err)
	}
}

func testInstrumentSourcesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := InstrumentSources(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstrumentSourcesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSourceOne := &InstrumentSource{}
	instrumentSourceTwo := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSourceOne, instrumentSourceDBTypes, false, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentSourceTwo, instrumentSourceDBTypes, false, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSourceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentSourceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstrumentSources(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstrumentSourcesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	instrumentSourceOne := &InstrumentSource{}
	instrumentSourceTwo := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSourceOne, instrumentSourceDBTypes, false, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}
	if err = randomize.Struct(seed, instrumentSourceTwo, instrumentSourceDBTypes, false, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSourceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = instrumentSourceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func instrumentSourceBeforeInsertHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceAfterInsertHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceAfterSelectHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceBeforeUpdateHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceAfterUpdateHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceBeforeDeleteHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceAfterDeleteHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceBeforeUpsertHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func instrumentSourceAfterUpsertHook(e boil.Executor, o *InstrumentSource) error {
	*o = InstrumentSource{}
	return nil
}

func testInstrumentSourcesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &InstrumentSource{}
	o := &InstrumentSource{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, instrumentSourceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InstrumentSource object: %s", err)
	}

	AddInstrumentSourceHook(boil.BeforeInsertHook, instrumentSourceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	instrumentSourceBeforeInsertHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.AfterInsertHook, instrumentSourceAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	instrumentSourceAfterInsertHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.AfterSelectHook, instrumentSourceAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	instrumentSourceAfterSelectHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.BeforeUpdateHook, instrumentSourceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentSourceBeforeUpdateHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.AfterUpdateHook, instrumentSourceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	instrumentSourceAfterUpdateHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.BeforeDeleteHook, instrumentSourceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentSourceBeforeDeleteHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.AfterDeleteHook, instrumentSourceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	instrumentSourceAfterDeleteHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.BeforeUpsertHook, instrumentSourceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentSourceBeforeUpsertHooks = []InstrumentSourceHook{}

	AddInstrumentSourceHook(boil.AfterUpsertHook, instrumentSourceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	instrumentSourceAfterUpsertHooks = []InstrumentSourceHook{}
}
func testInstrumentSourcesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentSourcesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx, instrumentSourceColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstrumentSourceToManyInstruments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstrumentSource
	var b, c Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, instrumentDBTypes, false, instrumentColumnsWithDefault...)
	randomize.Struct(seed, &c, instrumentDBTypes, false, instrumentColumnsWithDefault...)

	b.InstrumentSourceID = a.ID
	c.InstrumentSourceID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	instrument, err := a.Instruments(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range instrument {
		if v.InstrumentSourceID == b.InstrumentSourceID {
			bFound = true
		}
		if v.InstrumentSourceID == c.InstrumentSourceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InstrumentSourceSlice{&a}
	if err = a.L.LoadInstruments(tx, false, (*[]*InstrumentSource)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Instruments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Instruments = nil
	if err = a.L.LoadInstruments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Instruments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", instrument)
	}
}

func testInstrumentSourceToManyAddOpInstruments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a InstrumentSource
	var b, c, d, e Instrument

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, instrumentSourceDBTypes, false, strmangle.SetComplement(instrumentSourcePrimaryKeyColumns, instrumentSourceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Instrument{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, instrumentDBTypes, false, strmangle.SetComplement(instrumentPrimaryKeyColumns, instrumentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Instrument{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInstruments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.InstrumentSourceID {
			t.Error("foreign key was wrong value", a.ID, first.InstrumentSourceID)
		}
		if a.ID != second.InstrumentSourceID {
			t.Error("foreign key was wrong value", a.ID, second.InstrumentSourceID)
		}

		if first.R.InstrumentSource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InstrumentSource != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Instruments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Instruments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Instruments(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInstrumentSourcesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = instrumentSource.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentSourcesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InstrumentSourceSlice{instrumentSource}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInstrumentSourcesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := InstrumentSources(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	instrumentSourceDBTypes = map[string]string{`ID`: `smallint`, `Name`: `character varying`}
	_                       = bytes.MinRead
)

func testInstrumentSourcesUpdate(t *testing.T) {
	t.Parallel()

	if len(instrumentSourceColumns) == len(instrumentSourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	if err = instrumentSource.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInstrumentSourcesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(instrumentSourceColumns) == len(instrumentSourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	instrumentSource := &InstrumentSource{}
	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, instrumentSource, instrumentSourceDBTypes, true, instrumentSourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(instrumentSourceColumns, instrumentSourcePrimaryKeyColumns) {
		fields = instrumentSourceColumns
	} else {
		fields = strmangle.SetComplement(
			instrumentSourceColumns,
			instrumentSourcePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(instrumentSource))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InstrumentSourceSlice{instrumentSource}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInstrumentSourcesUpsert(t *testing.T) {
	t.Parallel()

	if len(instrumentSourceColumns) == len(instrumentSourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	instrumentSource := InstrumentSource{}
	if err = randomize.Struct(seed, &instrumentSource, instrumentSourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = instrumentSource.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstrumentSource: %s", err)
	}

	count, err := InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &instrumentSource, instrumentSourceDBTypes, false, instrumentSourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstrumentSource struct: %s", err)
	}

	if err = instrumentSource.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert InstrumentSource: %s", err)
	}

	count, err = InstrumentSources(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
